using Microsoft.AspNetCore.Mvc;
using KvizHub.Models;
using KvizHub.Services;
using System.Threading.Tasks;
using KvizHub.Interfaces;
using Microsoft.AspNetCore.Authorization;
using KvizHub.Dto;
using KvizHub.DTOs;
using Microsoft.EntityFrameworkCore;
using KvizHub.Infrastructure;
using System.Linq;

namespace KvizHub.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/quizzes")]
    public class QuizController : ControllerBase
    {
        private readonly IQuizService _quizService;

        public QuizController(IQuizService quizService)
        {
            _quizService = quizService;
        }

        [HttpPost]
        public async Task<IActionResult> AddQuiz([FromBody] QuizDto quizDto)
        {
            if (quizDto == null || quizDto.Questions == null || quizDto.Questions.Count == 0)
                return BadRequest(new { error = "Invalid quiz data" });

            // Map DTO to EF entity
            var quiz = new Quiz
            {
                Title = quizDto.Title,
                Difficulty = (Models.QuizDifficulty)quizDto.Difficulty,
                TimeLimitMinutes = quizDto.TimeLimitMinutes,
                Questions = quizDto.Questions.Select(q => new Question
                {
                    Text = q.Text,
                    Type = (Models.QuestionType)q.Type,
                    CorrectTextAnswer = q.CorrectTextAnswer,
                    Options = q.Options.Select((o, index) => new Option
                    {
                        Text = o.Text,
                        IsCorrect = o.IsCorrect
                        // OptionId will be auto-generated by EF
                    }).ToList()
                }).ToList()
            };

            var result = await _quizService.AddQuizAsync(quiz);
            return Ok(result);
        }

        [HttpGet("getall")]
        public async Task<IActionResult> GetAllQuiz()
        {
            var quizzes = await _quizService.GetAllQuiz();

            if (quizzes == null || !quizzes.Any())
            {
                return NotFound(new { message = "No quizzes found." });
            }

            return Ok(quizzes);
        }

        [HttpGet("myanswers")]
        public async Task<IActionResult> GetResultsQuizzes()
        {
            // Extract username from JWT claims
            var username = User?.Identity?.Name;

            if (string.IsNullOrEmpty(username))
                return Unauthorized(new { message = "Invalid user." });

            var quizzes = await _quizService.GetResultAnswerName(username);

            if (quizzes == null || !quizzes.Any())
                return NotFound(new { message = "No quizzes found." });

            return Ok(quizzes);
        }

        [HttpGet("globalanswers/{quizId}")]
        public async Task<IActionResult> GetGlobalAnswers(int quizId)
        {
            var answers = await _quizService.GetGlobalAnswersId(quizId);

            if (answers == null || !answers.Any())
                return NotFound(new { message = "No answers found for this quiz." });

            return Ok(answers);
        }


        [HttpGet("answer/{id}")]
        public async Task<IActionResult> GetQuizForAnswer(int id)
        {
            var quiz = await _quizService.GetQuizById(id);

            if (quiz == null)
            {
                return NotFound(new { message = $"Quiz with id {id} not found." });
            }

            return Ok(quiz);
        }

        [HttpGet("answerquiz/{id}")]
        public async Task<IActionResult> GetAnswerQuiz(int id)
        {
            var answerQuiz = await _quizService.GetAnswerQuizById(id);
            if (answerQuiz == null)
                return NotFound(new { message = $"AnswerQuiz with id {id} not found." });

            return Ok(answerQuiz);
        }

        [HttpPost("submit")]
        public async Task<IActionResult> SubmitAnswerQuiz([FromBody] AnswerQuizDto dto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            if (dto == null || dto.Questions == null || dto.Questions.Count == 0)
                return BadRequest(new { error = "Invalid answer quiz data" });

            // ✅ Extract username from claims instead of trusting frontend
            var username = User.Identity?.Name
            ?? User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value
            ?? User.FindFirst("unique_name")?.Value
            ?? User.FindFirst("name")?.Value
            ?? User.FindFirst("sub")?.Value;


            if (string.IsNullOrEmpty(username))
                return Unauthorized(new { error = "User not authenticated" });

            // Map DTO -> EF entity
            var answerQuiz = new AnswerQuiz
            {
                QuizId = dto.QuizId,
                Username = username,
                Questions = dto.Questions.Select(q => new AnswerQuestion
                {
                    QuestionId = q.QuestionId,
                    UserTextAnswer = q.UserTextAnswer ?? string.Empty,
                    Options = q.Options.Select(o => new AnswerOption
                    {
                        OptionId = o.OptionId,
                        Selected = o.Selected
                    }).ToList()
                }).ToList()
            };

            var result = await _quizService.AddAnswerQuiz(answerQuiz);

            return Ok(result);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteQuiz(int id)
        {           
            var quiz = await _quizService.GetQuizById(id);

            if (quiz == null)
            {
                return NotFound(new { message = $"Quiz with id {id} not found." });
            }

            // Delete quiz
            await _quizService.DeleteQuizId(id);

            return NoContent();
        }

    }
}
